package main

import (
	"encoding/json"
	"github.com/garyburd/go-oauth/oauth"
	"github.com/joeshaw/envdecode"
	"github.com/nsqio/go-nsq"
	"gopkg.in/mgo.v2"
	"io"
	"log"
	"net"
	"net/http"
	"net/url"
	"strconv"
	"strings"
	"sync"
	"time"
)





// Our bespoke dial function first ensures that conn is closed and then opens a new connection, keeping the conn variable updated with the current connection.
// If a connection dies (Twitter's API will do this from time to time) or is closed by us,
// we can redial without worrying about zombie connections.
var conn net.Conn
func dial(netw, addr string) (net.Conn, error) {
	if conn != nil {
		conn.Close()
		conn = nil
	}
	netc, err := net.DialTimeout(netw, addr, 5*time.Second)
	if err != nil {
		return nil, err
	}
	conn = netc
	return netc, nil
}


// We will periodically close the connection ourselves and initiate a new one because
// we want to reload the options from the database at regular intervals.
// To do this, we need a function that closes the connection and also closes io.ReadCloser,
// which we will use to read the body of the responses.
// Now, we can call closeConn at any time in order to break the ongoing connection with Twitter and tidy things up.
// In most cases, our code will load the options from the database again and open a new connection right away,
// but if we're shutting the program down (in response to a Ctrl + C hit), then we can call closeConn just before we exit.
var reader io.ReadCloser
func closeConn() {
	if conn != nil {
		conn.Close()
	}
	if reader != nil {
		reader.Close()
	}
}

// we are going to write a function that will read the environment variables and
// set up the OAuth objects we'll need in order to authenticate the requests.
// go get github.com/joeshaw/envdecode
var (
	authClient *oauth.Client
	creds *oauth.Credentials
)
func setupTwitterAuth() {
	var ts struct {
		ConsumerKey    string `env:"SP_TWITTER_KEY,required"`
		ConsumerSecret string `env:"SP_TWITTER_SECRET,required"`
		AccessToken    string `env:"SP_TWITTER_ACCESSTOKEN,required"`
		AccessSecret   string `env:"SP_TWITTER_ACCESSSECRET,required"`
	}
	if err := envdecode.Decode(&ts); err != nil {
		log.Fatalln(err)
	}
	creds = &oauth.Credentials{
		Token:  ts.AccessToken,
		Secret: ts.AccessSecret,
	}
	authClient = &oauth.Client{
		Credentials: oauth.Credentials{
			Token:  ts.ConsumerKey,
			Secret: ts.ConsumerSecret,
		},
	}
}


var (
	authSetupOnce sync.Once
	httpClient    *http.Client
)

func makeRequest(req *http.Request, params url.Values) (*http.Response, error) {
	authSetupOnce.Do(func() {
		setupTwitterAuth()
		httpClient = &http.Client{
			Transport: &http.Transport{
				Dial: dial,
			},
		}
	})
	formEnc := params.Encode()
	req.Header.Set("Content-Type", "application/x-www-form-urlencoded")
	req.Header.Set("Content-Length", strconv.Itoa(len(formEnc)))
	req.Header.Set("Authorization",  authClient.AuthorizationHeader(creds,
		"POST",
		req.URL, params))
	return httpClient.Do(req)
}


// In order to load the polls, and therefore the options to search Twitter for,
// we need to connect to and query MongoDB. In main.go, add the two functions dialdb and closedb:
// These two functions will connect to and disconnect from the locally running
// MongoDB instance using the mgo package and store
// mgo.Session (the database connection object) in a global variable called db.
var db *mgo.Session
func dialdb() error {
	var err error
	log.Println("dialing mongodb: localhost")
	db, err = mgo.Dial("localhost")
	return err
}

func closedb() {
	db.Close()
	log.Println("closed database connection")
}


// Assuming MongoDB is running and our code is able to connect,
// we need to load the poll objects and extract all the options from the documents,
// which we will then use to search Twitter. Add the following loadOptions function to main.go:

type poll struct {
	Options []string
}

func loadOptions() ([]string, error) {
	var options []string
	iter := db.DB("ballots").C("polls").Find(nil).Iter()
	var p poll
	for iter.Next(&p) {
		options = append(options, p.Options...)
	}
	iter.Close()
	return options, iter.Err()
}

// The structure contained in the stream is a complex one, containing all kinds of information about
// the tweet who made it
// and when and even what links or mentions of users occur in the body
// However, we are only interested in the tweet text itself; so, don't worry about all the other noise
type tweet struct {
	Text string
}


// function that takes a send only channel called votes;
// this is how this function will inform the rest of our program that it has noticed a vote on Twitter
// votes is sending only channel
func readFromTwitter(votes chan<- string) {

	// Load Option from DB
	options, err := loadOptions()
	if err != nil {
		log.Println("failed to load options:", err)
		return
	}

	// Create a url Object
	u, err := url.Parse("https://stream.twitter.com/1.1/statuses/filter.json")
	if err != nil {
		log.Println("creating filter request failed:", err)
		return
	}

	// Make Request Param from The URL and using the ulr object and request param
	query := make(url.Values)
	query.Set("track", strings.Join(options, ","))
	req, err := http.NewRequest("POST", u.String(), strings.NewReader(query.Encode()))
	if err != nil {
		log.Println("creating filter request failed:", err)
		return
	}

	// Call make request (open twitter connection) and sent to twiter
	resp, err := makeRequest(req, query)
	if err != nil {
		log.Println("making request failed:", err)
		return
	}

	// Get the resp and create a decoder object
	reader := resp.Body
	decoder := json.NewDecoder(reader)

	//infinite loop to it and decode it into t type of tweet
	for {
		var t tweet
		if err := decoder.Decode(&t); err != nil {
			break
		}

		// We use the response text from t compare with option if found signal it to vote channel (send).
		for _, option := range options {
			if strings.Contains(
				strings.ToLower(t.Text),
				strings.ToLower(option),
			) {
				log.Println("vote:", option)
				votes <- option
			}
		}
	}
}


// We are going to employ two signal channels in our code:
// one that we pass into our function that tells our goroutine
// that it should stop and another (provided by the function) that signals once the stopping is complete.
func startTwitterStream(stopchan <-chan struct{}, votes chan<- string) <-chan struct{} {
	stoppedchan := make(chan struct{}, 1)
	go func() {
		defer func() {
			stoppedchan <- struct{}{}
		}()
		for {
			select {
			case <-stopchan:
				log.Println("stopping Twitter...")
				return
			default:
				log.Println("Querying Twitter...")
				readFromTwitter(votes)
				log.Println("  (waiting)")

				// When the Twitter connection dies, our code will return,
				// where we sleep for 10 seconds using the time.Sleep function.
				// This is to give the Twitter API rest in case it closed the connection due to overuse.
				// Once we've rested, we re-enter the loop and check on stopchan again to see
				// whether calling code wants us to stop or not.
				time.Sleep(10 * time.Second) // wait before reconnecting
			}
		}
	}()
	return stoppedchan
}

// We then create an NSQ producer
// by calling NewProducer and connecting to the default NSQ port on localhost using a default configuration.
// We start a goroutine, which uses another great built-in
// feature of the Go language that lets us continually pull values from a channel (in our case, the votes channel)
// just by doing a normal for...range operation on it. Whenever the channel has no values,
// execution will be blocked until one comes down the line. If the votes channel is closed, the for loop will exit.
func publishVotes(votes <-chan string) <-chan struct{} {
	stopchan := make(chan struct{}, 1)
	pub, _ := nsq.NewProducer("localhost:4150", nsq.NewConfig())
	go func() {
		for vote := range votes {
			pub.Publish("votes", []byte(vote)) // publish vote
		}
		log.Println("Publisher: Stopping")
		pub.Stop()
		log.Println("Publisher: Stopped")
		stopchan <- struct{}{}
	}()
	return stopchan
}
